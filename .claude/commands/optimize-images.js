#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üñºÔ∏è  –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function getFileSize(filePath) {
  try {
    const stats = fs.statSync(filePath);
    return stats.size;
  } catch (error) {
    return 0;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
function formatSize(bytes) {
  if (bytes < 1024) return `${bytes} B`;
  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
  return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ImageMagick
function checkImageMagick() {
  try {
    execSync('convert -version', { stdio: 'pipe' });
    return true;
  } catch (error) {
    console.log('‚ùå ImageMagick –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ Ubuntu/Debian: sudo apt-get install imagemagick');
    console.log('üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ macOS: brew install imagemagick');
    return false;
  }
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function optimizePNG(inputPath, outputPath, quality = 85) {
  const originalSize = getFileSize(inputPath);
  
  if (!fs.existsSync(inputPath)) {
    console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${inputPath}`);
    return;
  }

  console.log(`üì∏ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: ${path.basename(inputPath)}`);
  console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${formatSize(originalSize)}`);

  try {
    // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –ø–æ–º–æ—â—å—é ImageMagick
    const command = `convert "${inputPath}" -strip -interlace Plane -gaussian-blur 0.05 -quality ${quality} "${outputPath}"`;
    execSync(command, { stdio: 'pipe' });
    
    const newSize = getFileSize(outputPath);
    const savings = ((originalSize - newSize) / originalSize * 100).toFixed(1);
    
    console.log(`   –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${formatSize(newSize)}`);
    console.log(`   –≠–∫–æ–Ω–æ–º–∏—è: ${savings}%`);
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: ${outputPath}\n`);
    
    return { originalSize, newSize, savings: parseFloat(savings) };
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${inputPath}:`, error.message);
    return null;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ WebP –≤–µ—Ä—Å–∏–π
function createWebP(inputPath) {
  const inputDir = path.dirname(inputPath);
  const inputName = path.basename(inputPath, path.extname(inputPath));
  const webpPath = path.join(inputDir, `${inputName}.webp`);
  
  try {
    const command = `convert "${inputPath}" -strip -quality 80 "${webpPath}"`;
    execSync(command, { stdio: 'pipe' });
    
    const webpSize = getFileSize(webpPath);
    const originalSize = getFileSize(inputPath);
    const savings = ((originalSize - webpSize) / originalSize * 100).toFixed(1);
    
    console.log(`üåê WebP —Å–æ–∑–¥–∞–Ω: ${path.basename(webpPath)}`);
    console.log(`   –†–∞–∑–º–µ—Ä WebP: ${formatSize(webpSize)}`);
    console.log(`   –≠–∫–æ–Ω–æ–º–∏—è: ${savings}%\n`);
    
    return webpPath;
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebP –¥–ª—è ${inputPath}:`, error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  if (!checkImageMagick()) {
    console.log('\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ImageMagick...');
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ apt (–¥–ª—è Ubuntu/Debian)
      if (fs.existsSync('/usr/bin/apt-get')) {
        console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ImageMagick —á–µ—Ä–µ–∑ apt...');
        execSync('sudo apt-get update && sudo apt-get install -y imagemagick', { stdio: 'inherit' });
      }
    } catch (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ImageMagick –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
      console.log('   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É');
      process.exit(1);
    }
  }

  const assetsDir = 'frontend/assets/images';
  
  // –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å - character.png
  const characterPath = path.join(assetsDir, 'character.png');
  
  if (fs.existsSync(characterPath)) {
    console.log('üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: character.png (2MB)\n');
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    const backupPath = characterPath.replace('.png', '.original.png');
    if (!fs.existsSync(backupPath)) {
      fs.copyFileSync(characterPath, backupPath);
      console.log('üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: character.original.png\n');
    }
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    const optimizedPath = characterPath.replace('.png', '.optimized.png');
    const result = optimizePNG(characterPath, optimizedPath, 85);
    
    // –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é
    createWebP(characterPath);
    
    // –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏ —ç–∫–æ–Ω–æ–º–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è
    if (result && result.savings > 20) {
      console.log('üîÑ –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º...');
      fs.copyFileSync(optimizedPath, characterPath);
      fs.unlinkSync(optimizedPath);
      console.log('‚úÖ –ó–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
    }
  } else {
    console.log(`‚ùå character.png –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${characterPath}`);
  }
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫—Ä—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const imageFiles = [
    'barcode-component.png',
    'footer.png'
  ];
  
  let totalSavings = 0;
  let filesOptimized = 0;
  
  imageFiles.forEach(fileName => {
    const filePath = path.join(assetsDir, fileName);
    if (fs.existsSync(filePath)) {
      const optimizedPath = filePath.replace(/\.(png|jpg|jpeg)$/, '.optimized.$1');
      const result = optimizePNG(filePath, optimizedPath, 90);
      
      if (result && result.savings > 10) {
        fs.copyFileSync(optimizedPath, filePath);
        fs.unlinkSync(optimizedPath);
        totalSavings += result.originalSize - result.newSize;
        filesOptimized++;
      } else if (fs.existsSync(optimizedPath)) {
        fs.unlinkSync(optimizedPath);
      }
      
      // –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      createWebP(filePath);
    }
  });
  
  console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');
  console.log(`   –§–∞–π–ª–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${filesOptimized + 1}`);
  console.log(`   –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${formatSize(totalSavings)}`);
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebP —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤');
  console.log('   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
  console.log('   - –î–æ–±–∞–≤—å—Ç–µ responsive images –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤');
  
  console.log('\n‚ú® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

main();