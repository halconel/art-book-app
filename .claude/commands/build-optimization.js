#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–¥–∞...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function runCommand(command, description) {
  console.log(`üìã ${description}`);
  try {
    const output = execSync(command, { 
      encoding: 'utf8',
      cwd: process.cwd(),
      stdio: 'pipe'
    });
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ\n');
    return output;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.stdout) console.log('stdout:', error.stdout);
    if (error.stderr) console.log('stderr:', error.stderr);
    console.log('');
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
function analyzeAssets() {
  console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤:');
  
  const assetsDir = path.join(process.cwd(), 'frontend/assets');
  if (!fs.existsSync(assetsDir)) {
    console.log('‚ùå –ö–∞—Ç–∞–ª–æ–≥ assets –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  function getFileSize(filePath) {
    try {
      const stats = fs.statSync(filePath);
      return stats.size;
    } catch (error) {
      return 0;
    }
  }

  function formatSize(bytes) {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  }

  function scanDirectory(dir, basePath = '') {
    const items = fs.readdirSync(dir);
    const files = [];
    
    items.forEach(item => {
      const fullPath = path.join(dir, item);
      const relativePath = path.join(basePath, item);
      
      if (fs.statSync(fullPath).isDirectory()) {
        files.push(...scanDirectory(fullPath, relativePath));
      } else {
        const size = getFileSize(fullPath);
        files.push({ path: relativePath, size, fullPath });
      }
    });
    
    return files;
  }

  const files = scanDirectory(assetsDir);
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (—É–±—ã–≤–∞–Ω–∏–µ)
  files.sort((a, b) => b.size - a.size);
  
  console.log('\nüìÅ –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Ñ–∞–π–ª—ã:');
  files.slice(0, 10).forEach(file => {
    const sizeFormatted = formatSize(file.size);
    const warning = file.size > 500 * 1024 ? ' ‚ö†Ô∏è' : file.size > 100 * 1024 ? ' ‚ö°' : '';
    console.log(`  ${file.path}: ${sizeFormatted}${warning}`);
  });

  const totalSize = files.reduce((sum, file) => sum + file.size, 0);
  console.log(`\nüì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤: ${formatSize(totalSize)}\n`);
  
  return files;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üèÅ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...\n');

  // 1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  analyzeAssets();

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint
  runCommand('npm run lint', '–ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint');

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (fs.existsSync('tsconfig.json')) {
    runCommand('npx tsc --noEmit', '–ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript');
  }

  // 4. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ verbose –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  runCommand('npm test -- --watchAll=false', '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤');

  // 5. –°–æ–∑–¥–∞–Ω–∏–µ production –±–∏–ª–¥–∞
  console.log('üî® –°–æ–∑–¥–∞–Ω–∏–µ production –±–∏–ª–¥–∞...');
  const buildOutput = runCommand('NODE_ENV=production npm run build', 'Production –±–∏–ª–¥');
  
  if (buildOutput) {
    console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –±–∏–ª–¥–∞:');
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –≤ –≤—ã–≤–æ–¥–µ webpack
    const lines = buildOutput.split('\n');
    lines.forEach(line => {
      if (line.includes('main.') || line.includes('vendor.') || line.includes('chunk') || line.includes('KB') || line.includes('MB')) {
        console.log(`  ${line.trim()}`);
      }
    });
  }

  // 6. –ê–Ω–∞–ª–∏–∑ –ø—É–±–ª–∏—á–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ –±–∏–ª–¥–∞
  if (fs.existsSync('public')) {
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –±–∏–ª–¥–∞:');
    try {
      const output = execSync('find public -name "*.js" -o -name "*.css" -o -name "*.png" -o -name "*.jpg" -o -name "*.svg" | head -20 | xargs ls -lh', { encoding: 'utf8' });
      console.log(output);
    } catch (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã');
    }
  }

  console.log('\n‚ú® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è > 500KB —Ç—Ä–µ–±—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ‚ö†Ô∏è');
  console.log('   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è > 100KB –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å ‚ö°');
  console.log('   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ WebP —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
  console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –Ω–µcritical —Ä–µ—Å—É—Ä—Å–æ–≤');
}

// –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});